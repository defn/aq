#!/usr/bin/env bash

function cmd_aws {
  echo "aws $@" 1>&2
  aws "$@" | jq -S .
}

function id_account {
  aws iam get-user | jq -r '.User.Arn | split(":")[4]'
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  mkdir -p "$shome/.cache"

  if [[ "$#" == 0 ]]; then
    set -- \
            instances images-ubuntu images vpcs subnets network-acls \
            internet-gateways route-tables addresses security-groups tags \
            volumes snapshots key-pairs load-balancers launch-configurations \
						auto-scaling-groups iam-users iam-groups iam-roles s3-buckets \
            sns-topics sns-subscriptions sqs-queues vpc-endoint-services \
            vpc-endoints vpc-peering-connections vpn-connections vpn-gateways \
            route53-hosted-zones
    echo "$@" | runmany 4 "$BASH_SOURCE"' $1' 
    return $?
  fi

  local cache="$shome/.cache"

  local nm_resource
  for nm_resource in "$@"; do
    case "$nm_resource" in
      instances)
        cmd_aws ec2 describe-instances ;;
      images-ubuntu)
        cmd_aws ec2 describe-images --owners 099720109477 | jq -S '.Images = (.Images | sort_by(.Name))' ;;
      images)
        cmd_aws ec2 describe-images --owners "$(id_account)" | jq -S '.Images = (.Images | sort_by(.Name))' ;;
      vpcs)
        cmd_aws ec2 describe-vpcs ;;
      subnets)
        cmd_aws ec2 describe-subnets ;;
      network-acls)
        cmd_aws ec2 describe-network-acls ;;
      internet-gateways)
        cmd_aws ec2 describe-internet-gateways ;;
      route-tables)
        cmd_aws ec2 describe-route-tables ;;
      addresses)
        cmd_aws ec2 describe-addresses | jq -S '.Addresses = (.Addresses| sort_by(.PublicIp))' ;;
      security-groups)
        cmd_aws ec2 describe-security-groups | jq -S '.SecurityGroups = (.SecurityGroups | sort_by([.GroupId, .GroupName]))' ;;
      tags)
        cmd_aws ec2 describe-tags | jq -S '.Tags = (.Tags |  sort_by([.ResourceType,.ResourceId,.Key,.Value]))' ;;
      volumes)
        cmd_aws ec2 describe-volumes ;;
      snapshots)
        cmd_aws ec2 describe-snapshots --owners "$(id_account)" ;;
      key-pairs)
        cmd_aws ec2 describe-key-pairs ;;
      load-balancers)
        cmd_aws elb describe-load-balancers ;;
      launch-configurations)
        cmd_aws autoscaling describe-launch-configurations ;;
      auto-scaling-groups)
        cmd_aws autoscaling describe-auto-scaling-groups ;;
      iam-users)
        cmd_aws iam list-users ;;
      iam-groups)
        cmd_aws iam list-groups ;;
      iam-roles)
        cmd_aws iam list-roles ;;
      s3-buckets)
        cmd_aws s3api list-buckets ;;
			sns-topics)
				cmd_aws sns list-topics ;;
			sns-subscriptions)
				cmd_aws sns list-subscriptions ;;
			sqs-queues)
				cmd_aws sqs list-queues ;;
      vpc-endoint-services)
        cmd_aws ec2 describe-vpc-endpoint-services ;;
      vpc-endoints)
        cmd_aws ec2 describe-vpc-endpoints ;;
      vpc-peering-connections)
        cmd_aws ec2 describe-vpc-peering-connections ;;
      vpn-connections)
        cmd_aws ec2 describe-vpn-connections ;;
      vpn-gateways)
        cmd_aws ec2 describe-vpn-gateways ;;
      route53-hosted-zones)
        cmd_aws route53 list-hosted-zones ;;
    esac > "$cache/$nm_resource.json"
  done
}

source sub "$BASH_SOURCE" "$@"
