#!/usr/bin/env bash

function cmd_aws {
  echo "aws $@" 1>&2
  aws "$@"
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  mkdir -p "$shome/.cache"

  if [[ "$#" == 0 ]]; then
    set -- \
            instances images-ubuntu images vpcs subnets network-acls \
            internet-gateways route-tables addresses security-groups tags \
            volumes snapshots key-pairs load-balancers launch-configurations \
						auto-scaling-groups iam-users iam-groups iam-roles s3-buckets \
						sns-topics sns-subscriptions sqs-queues 

    echo "$@" | runmany 4 "$BASH_SOURCE"' $1' 
    return $?
  fi

  local cache="$shome/.cache"

  while [[ -n "${1:-}" ]]; do
    case "$1" in
      instances)
        cmd_aws ec2 describe-instances > "$cache/instances.json" ;;
      images-ubuntu)
        cmd_aws ec2 describe-images --owners 099720109477 > "$cache/images-ubuntu.json" ;;
      images)
        local id_account="$(aws iam get-user | jq -r '.User.Arn | split(":")[4]')"
        cmd_aws ec2 describe-images --owners "$id_account" > "$cache/images.json" ;;
      vpcs)
        cmd_aws ec2 describe-vpcs > "$cache/vpcs.json" ;;
      subnets)
        cmd_aws ec2 describe-subnets > "$cache/subnets.json" ;;
      network-acls)
        cmd_aws ec2 describe-network-acls > "$cache/network-acls.json" ;;
      internet-gateways)
        cmd_aws ec2 describe-internet-gateways > "$cache/internet-gateways.json" ;;
      route-tables)
        cmd_aws ec2 describe-route-tables > "$cache/route-tables.json" ;;
      addresses)
        cmd_aws ec2 describe-addresses > "$cache/addresses.json" ;;
      security-groups)
        cmd_aws ec2 describe-security-groups > "$cache/security-groups.json" ;;
      tags)
        cmd_aws ec2 describe-tags > "$cache/tags.json" ;;
      volumes)
        cmd_aws ec2 describe-volumes > "$cache/volumes.json" ;;
      snapshots)
        cmd_aws ec2 describe-snapshots > "$cache/snapshots.json" ;;
      key-pairs)
        cmd_aws ec2 describe-key-pairs > "$cache/key-pairs.json" ;;
      load-balancers)
        cmd_aws elb describe-load-balancers > "$cache/load-balancers.json" ;;
      launch-configurations)
        cmd_aws autoscaling describe-launch-configurations > "$cache/launch-configurations.json" ;;
      auto-scaling-groups)
        cmd_aws autoscaling describe-auto-scaling-groups > "$cache/auto-scaling-groups.json" ;;
      iam-users)
        cmd_aws iam list-users > "$cache/iam-users.json" ;;
      iam-groups)
        cmd_aws iam list-groups > "$cache/iam-groups.json" ;;
      iam-roles)
        cmd_aws iam list-roles > "$cache/iam-roles.json" ;;
      s3-bucket)
        cmd_aws s3api list-buckets > "$cache/s3-buckets.json" ;;
			sns-topics)
				cmd_aws sns list-topics > "$cache/sns-topics.json" ;;
			sns-subscriptions)
				cmd_aws sns list-subscriptions > "$cache/sns-list-subscriptions.json" ;;
			sqs-queues)
				cmd_aws sqs list-queues > "$dache/sqs-list-queues.json" ;;
    esac
    shift
  done
}

source sub "$BASH_SOURCE" "$@"
