#!/usr/bin/env bash

function resources {
  echo \
    instances images-ubuntu images vpcs subnets network-acls internet-gateways \
    route-tables addresses security-groups tags volumes snapshots key-pairs \
    load-balancers launch-configurations auto-scaling-groups iam-users \
    iam-groups iam-roles iam-policies iam-account-aliases iam-instance-profiles \
    iam-roles iam-server-certificates iam-signing-certificates \
    iam-ssh-public-keys iam-users iam-virtual-mfa-devices s3-buckets sns-topics \
    sns-subscriptions sqs-queues vpc-endpoint-services vpc-endpoints \
    vpc-peering-connections vpn-connections vpn-gateways route53-hosted-zones
}

function cmd_aws {
  local nm_resource="$1"; shift

  echo "aws $@" 1>&2

  if [[ -n "${AQ_CACHE:-}" ]]; then
    aq cat "$nm_resource"
  else
    aws "$@" | jq -S .
  fi
}

function id_account {
  aws iam get-user | jq -r '.User.Arn | split(":")[4]'
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  mkdir -p "$shome/.cache"

  if [[ "$#" == 0 ]]; then
    set -- $(resources)
    echo "$@" | runmany 4 "$BASH_SOURCE"' $1' 
    return $?
  fi

  local cache="$shome/.cache"

  local nm_resource
  for nm_resource in "$@"; do
    case "$nm_resource" in
      list)
        for a in $(resources); do
          echo "$a" 1>&2
        done
        break
        ;;
      instances)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      images-ubuntu)
        local id_ubuntu='099720109477'
        cmd_aws "$nm_resource" ec2 describe-images --owners "$id_ubuntu" --filters Name=architecture,Values=x86_64 Name=virtualization-type,Values=hvm Name=state,Values=available \
          | jq -S '.Images |= (map(select(.Name | test("trusty|xenial"))) | sort_by(.Name)) | .Images[].BlockDeviceMappings |= sort_by(.DeviceName)' ;;
      images)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" --owners "$(id_account)" | jq -S '.Images |= sort_by(.Name) | .Images[].BlockDeviceMappings |= sort_by(.DeviceName)' ;;
      vpcs)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      subnets)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      network-acls)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      internet-gateways)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      route-tables)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" | jq -S '.RouteTables[].Routes |= sort_by(.DestinationCidrBlock)' ;;
      addresses)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" | jq -S '.Addresses |= sort_by(.PublicIp)' ;;
      security-groups)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" | jq -S '.SecurityGroups |= sort_by([.GroupId, .GroupName])' ;;
      tags)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" | jq -S '.Tags |= sort_by([.ResourceType,.ResourceId,.Key,.Value])' ;;
      volumes)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" | jq -S '.Volumes[].Attachments |= sort_by(.VolumeId)' ;;
      snapshots)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" --owner-ids "$(id_account)" ;;
      key-pairs)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      load-balancers)
        cmd_aws "$nm_resource" elb "describe-${nm_resource}" ;;
      launch-configurations)
        cmd_aws "$nm_resource" autoscaling "describe-${nm_resource}" ;;
      auto-scaling-groups)
        cmd_aws "$nm_resource" autoscaling "describe-${nm_resource}" ;;
      iam-users)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-groups)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-roles)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-policies)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-account-aliases)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-instance-profiles)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-server-certificates)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-signing-certificates)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-ssh-public-keys)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      iam-virtual-mfa-devices)
        cmd_aws "$nm_resource" iam "${nm_resource/iam-/list-}" ;;
      s3-buckets)
        cmd_aws "$nm_resource" s3api "${nm_resource/s3-/list-}" ;;
			sns-topics)
				cmd_aws "$nm_resource" sns "${nm_resource/sns-/list-}";;
			sns-subscriptions)
				cmd_aws "$nm_resource" sns "${nm_resource/sns-/list-}" ;;
			sqs-queues)
				cmd_aws "$nm_resource" sqs "${nm_resource/sqs-/list-}" ;;
      vpc-endpoint-services)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      vpc-endpoints)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      vpc-peering-connections)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      vpn-connections)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      vpn-gateways)
        cmd_aws "$nm_resource" ec2 "describe-${nm_resource}" ;;
      route53-hosted-zones)
        cmd_aws "$nm_resource" route53 "${nm_resource/route53-/list-}" ;;
    esac > "$cache/$nm_resource.json.1"
    mv "$cache/$nm_resource.json.1" "$cache/$nm_resource.json"

  done
}

source sub "$BASH_SOURCE" "$@"
